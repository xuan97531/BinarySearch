//---------------------------------------------------------------------------

#include <vcl.h>
#include <math.h>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;

struct BSTNode{
	struct BSTNode *leftchild;
	int data;
	struct BSTNode *rightchild;
};

struct DBSTNode{
	struct DBSTNode *leftchild;
	String data;
	int index;
	struct DBSTNode *rightchild;
};

struct BSTNode *root;
struct DBSTNode *Droot;
String tree;
int*X;
int*Y;
int cn;
int**treenode;

//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------

struct BSTNode *NewBSTNode(int x){
	struct BSTNode*node = new struct BSTNode;
	node->data = x;
	node->leftchild = node->rightchild = NULL;
	return node;
}

int SearchBST(int x){
	struct BSTNode *p,*q;
	p = root, q = NULL;
	while(p!=NULL){
	   q = p;
	   if(x == p->data) return 1;
	   else if(x < p->data) p = p->leftchild;
	   else p = p->rightchild;
	}
	return 0;
}

struct BSTNode* RSearchBST(struct BSTNode*node,int x){
	if(node == NULL) return NULL;
	else if(x == node->data) return node;
	else if(x < node->data) return RSearchBST(node->leftchild,x);
	else return RSearchBST(node->rightchild,x);
}

struct BSTNode* RInsertBST(struct BSTNode* node,int x){
	if(node == NULL) return NewBSTNode(x);
	else if(x < node->data) node->leftchild = RInsertBST(node->leftchild,x);
	else node->rightchild = RInsertBST(node->rightchild,x);
	return node;
}

int InsertBST(int x){
	struct BSTNode *p,*q;
	p = root, q = NULL;
	while(p!=NULL){
	   q = p;
	   if(x == p->data) return 0;
	   else if(x < p->data) p = p->leftchild;
	   else p = p->rightchild;
	}
	p = NewBSTNode(x);
	if(root == NULL){
	   root = p;
	   cn++;
	}
	else if(x < q->data){
	   q->leftchild = p;
	   cn++;
	}
	else{
	   q->rightchild = p;
	   cn++;
	}
	return 1;
}

struct BSTNode* RInsertRandom(int n,int rangemin,int rangemax){
	 int count=0;
	 String list=" => ";
	 Form1->Memo1->Lines->Add("-----(遞迴)新增亂數成功("+IntToStr(rangemin)+" ~ "+IntToStr(rangemax)+")------");
	 while(count < n){
		int x = rand()%rangemax+rangemin;
		if(root == NULL || !(SearchBST(x))){
		   root = RInsertBST(root,x);
		   list+=IntToStr(x)+"  ";
		   count++;
		}
	 }
	 Form1->Memo1->Lines->Add(list);
	 return root;
}

struct BSTNode* InsertRandom(int n,int rangemin,int rangemax){
	 int count=0;
	 String list=" => ";
	 Form1->Memo1->Lines->Add("-----(非遞迴)新增亂數成功("+IntToStr(rangemin)+" ~ "+IntToStr(rangemax)+")------");
	 while(count < n){
		int x = rand()%rangemax+rangemin;
		if(InsertBST(x)){
		   list+=IntToStr(x)+"  ";
		   count++;
		}
	 }
	 Form1->Memo1->Lines->Add(list);
	 return root;
}

struct BSTNode* Right_Left(struct BSTNode*node){
	   struct BSTNode *p;
	   for(p = node; p->leftchild!=NULL; p = p->leftchild);
	   return p;
}

struct BSTNode* RDeleteBST(struct BSTNode*node,int x){
	   struct BSTNode *t;
	   if(x < node->data) node->leftchild = RDeleteBST(node->leftchild,x);
	   else if(x > node->data) node->rightchild = RDeleteBST(node->rightchild,x);
	   else{
		  if((node->leftchild == NULL) || (node->rightchild == NULL)){
			 t = (node->leftchild) ? node->leftchild : node->rightchild;
			 if(t == NULL){
				t = node;
				node = NULL;
			 }
			 else *node = *t;
			 free(t);
		  }
		  else{
			 t = Right_Left(node->rightchild);
			 node->data = t->data;
			 node->rightchild = RDeleteBST(node->rightchild,t->data);
		  }
	   }
	   return node;

}

int DeleteBST(int x){
	struct BSTNode *p, *pf, *q, *qf;
	p = root; pf = NULL;
	while(p!=NULL){
	   if(x == p->data){
		  if((p->leftchild == NULL) && (p->rightchild == NULL)) q = NULL;
		  else if(p->leftchild!=NULL){
			 qf = p;
			 q  = p->leftchild;
			 while(q->rightchild!=NULL){
				qf = q;
				q  = q->rightchild;
			 }
			 if(p == qf) qf->leftchild = q->leftchild;
			 else qf->rightchild = q->leftchild;
		  }
		  else{
			 qf = p;
			 q  = p->rightchild;
			 while(q->leftchild!=NULL){
				qf = q;
				q  = q->leftchild;
			 }
			 if(p == qf) qf->rightchild = q->rightchild;
			 else qf->leftchild = q->rightchild;
		  }
		  if(q!=NULL){
			 q->leftchild = p->leftchild;
			 q->rightchild = p->rightchild;
		  }
		  if(pf == NULL) root = q;
		  else{
			 if(x < pf->data) pf->leftchild = q;
			 else pf->rightchild = q;
		  }
		  free(p);
		  cn--;
		  return 1;
	   }
	   else{
		  pf = p;
		  if(x < p->data) p = p->leftchild;
		  else p = p->rightchild;
	   }
	}
	return 0;
}

void printBST_infix(struct BSTNode*node){
	 if(node!=NULL){
		printBST_infix(node->leftchild);
		tree += IntToStr(node->data) + " - ";
		printBST_infix(node->rightchild);
	 }
}

void printBST_prefix(struct BSTNode*node){
	 if(node!=NULL){
		tree += IntToStr(node->data) + " - ";
		printBST_prefix(node->leftchild);
        printBST_prefix(node->rightchild);
	 }
}

void printBST_postfix(struct BSTNode*node){
	 if(node!=NULL){
		printBST_postfix(node->leftchild);
		printBST_postfix(node->rightchild);
		tree += IntToStr(node->data) + " - ";
	 }
}

void ClearBST(struct BSTNode*node){
	 if(node!=NULL){
		ClearBST(node->leftchild);
		ClearBST(node->rightchild);
		delete(node);
	 }
}
/*
void ClearDBST(struct DBSTNode*Dnode){
	 if(Dnode!=NULL){
		ClearDBST(Dnode->leftchild);
		ClearDBST(Dnode->rightchild);
		delete(Dnode);
	 }
} */


void __fastcall TForm1::Button1Click(TObject *Sender)
{
	 int data = StrToInt(Edit1->Text);
	 if(root == NULL || !(SearchBST(data))){
		root = RInsertBST(root,data);
		tree = "";
		printBST_infix(root);
		Memo1->Lines->Add("-----------(遞迴)新增成功 => 已新增 "+IntToStr(data)+"--------");
		Memo1->Lines->Add("BST(infix) => "+tree);
	 }
	 else Memo1->Lines->Add("(遞迴)新增失敗 => BST已存在"+IntToStr(data));
	// if(CheckBox1->Checked) Button14->Click();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button2Click(TObject *Sender)
{
     int data = StrToInt(Edit1->Text);
	 int suc = InsertBST(data);
	 if(suc){
		tree = "";
		printBST_infix(root);
		Memo1->Lines->Add("-----------(非遞迴)新增成功 => 已新增 "+IntToStr(data)+"--------");
		Memo1->Lines->Add("BST(infix) => "+tree);
	 }
	 else Memo1->Lines->Add("(非遞迴)新增失敗 => BST已存在"+IntToStr(data));
   //	 if(CheckBox1->Checked) Button14->Click();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button3Click(TObject *Sender)
{
	 int data = StrToInt(Edit1->Text);
	 if(SearchBST(data)) Memo1->Lines->Add("(非遞迴)搜尋成功 => "+IntToStr(data));
	 else{
		if(CheckBox2->Checked){
		   Memo1->Lines->Add("(非遞迴)搜尋失敗 => "+IntToStr(data)+"不在BST中 => (非遞迴)新增進BST");
		   InsertBST(data);
           tree = "";
		   printBST_infix(root);
		   Memo1->Lines->Add("BST(infix) => "+tree);
		   if(CheckBox1->Checked) Button14->Click();
		}
		else Memo1->Lines->Add("(非遞迴)搜尋失敗 => "+IntToStr(data)+"不在BST中");
	 }
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button13Click(TObject *Sender)
{
	 int data = StrToInt(Edit1->Text);
	 if(RSearchBST(root,data)!=NULL)  Memo1->Lines->Add("(遞迴)搜尋成功 => "+IntToStr(data));
	 else{
        if(CheckBox2->Checked){
		   Memo1->Lines->Add("(遞迴)搜尋失敗 => "+IntToStr(data)+"不在BST中 => (遞迴)新增進BST");
		   root = RInsertBST(root,data);
           tree = "";
		   printBST_infix(root);
		   Memo1->Lines->Add("BST(infix) => "+tree);
		   //if(CheckBox1->Checked) Button14->Click();
		}
		else Memo1->Lines->Add("(遞迴)搜尋失敗 => "+IntToStr(data)+"不在BST中");
	 }
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button4Click(TObject *Sender)
{
	 int data = StrToInt(Edit1->Text);
	 if(SearchBST(data)){
		root = RDeleteBST(root,data);
		tree = "";
		printBST_infix(root);
		Memo1->Lines->Add("-----------(遞迴)刪除成功 => 已刪除 "+IntToStr(data)+"--------");
		Memo1->Lines->Add("BST(infix) => "+tree);
	   //	if(CheckBox1->Checked) Button14->Click();
	 }
	 else Memo1->Lines->Add("(遞迴)刪除失敗 => BST中不存在"+IntToStr(data));

}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button5Click(TObject *Sender)
{
	 int data = StrToInt(Edit1->Text);
	 int suc = DeleteBST(data);
	 if(suc){
        tree = "";
		printBST_infix(root);
		Memo1->Lines->Add("-----------(非遞迴)刪除成功 => 已刪除 "+IntToStr(data)+"--------");
		Memo1->Lines->Add("BST(infix) => "+tree);
	   //	if(CheckBox1->Checked) Button14->Click();
	 }
	 else Memo1->Lines->Add("(非遞迴)刪除失敗 => BST中不存在"+IntToStr(data));
}
//---------------------------------------------------------------------------



void __fastcall TForm1::Button9Click(TObject *Sender)
{
	 int n = StrToInt(Edit3->Text);
	 int rangemin = StrToInt(Edit2->Text);
	 int rangemax = StrToInt(Edit4->Text);
	 root = RInsertRandom(n,rangemin,rangemax);
	 tree = "";
	 printBST_infix(root);
	 Memo1->Lines->Add("BST(infix) => "+tree);
  //	 if(CheckBox1->Checked) Button14->Click();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button10Click(TObject *Sender)
{
	 int n = StrToInt(Edit3->Text);
	 int rangemin = StrToInt(Edit2->Text);
	 int rangemax = StrToInt(Edit4->Text);
	 root  = InsertRandom(n,rangemin,rangemax);
	 tree = "";
	 printBST_infix(root);
	 Memo1->Lines->Add("BST(infix) => "+tree);
  //	 if(CheckBox1->Checked) Button14->Click();
}
//---------------------------------------------------------------------------


void __fastcall TForm1::Button6Click(TObject *Sender)
{
	 tree = "";
	 printBST_prefix(root);
	 Memo1->Lines->Add("前序(prefix)走訪BST------------------------");
	 Memo1->Lines->Add("=> "+tree);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button7Click(TObject *Sender)
{
	 tree = "";
	 printBST_infix(root);
	 Memo1->Lines->Add("中序(infix)走訪BST------------------------");
	 Memo1->Lines->Add("=> "+tree);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button8Click(TObject *Sender)
{
	 tree = "";
	 printBST_postfix(root);
	 Memo1->Lines->Add("後序(prefix)走訪BST------------------------");
	 Memo1->Lines->Add("=> "+tree);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button11Click(TObject *Sender)
{
	 ClearBST(root);
	 //ClearDrawBST(Droot);
	 Memo1->Lines->Add("已清除BST");
	// Memo1->Lines->Add(IntToStr(root->data));
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button12Click(TObject *Sender)
{
     Memo1->Clear();
}
//---------------------------------------------------------------------------

